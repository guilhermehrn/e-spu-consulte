# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EspuConsulteDialog
                                 A QGIS plugin
 Consulta Sobreposição com áreas do Governo Federal do Brasil
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Guilherme Henrique
        email                : guilherme.nascimento@planejamento.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5.QtCore import QSettings


from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox, QDialog

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'configurationDialog.ui'))


class ConfigurationDialog(QDialog, FORM_CLASS):
    def __init__(self, iface):
        """Constructor."""

        QDialog.__init__(self)
        self.setupUi(self)
        #super(EspuConsulteDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        settings = QSettings('foo')
        self.name = settings.value('name')

        if self.name == None:
            self.name=''
        self.nameConection.setText(self.name)
        settings.endGroup()
        settings = QSettings()


        settings.beginGroup('PostgreSQL/connections/'+self.name)

        self.dataBaseName.setText(settings.value('database'))
        self.hostAdress.setText(settings.value('host'))
        self.port.setText(settings.value('port'))
        self.userNameBase.setText(settings.value('username'))
        self.passwordBase.setText(settings.value('password'))
        settings.endGroup()

        settings.beginGroup("ApiCredenciais")
        self.key.setText(settings.value('key'))

        if int(settings.value('geocoderEngineIndex')) != 0 or int(settings.value('geocoderEngineIndex')) != 1:
            self.geocoderEngine.setCurrentIndex(int(settings.value('geocoderEngineIndex')))
        else:
            self.geocoderEngine.setCurrentIndex(1)

        settings.endGroup()


        self.configButtonBox.accepted.connect(self.storeConnectionConfiguration)
        #self.buttonBox.rejected.connect(Dialog.reject)


    def storeConnectionConfiguration(self):
        """
        Stores the new configuration
        server: server name
        database: database name
        """
        #name = self.connectionEdit.text()
        #(host, port, user, password) = self.getServerConfiguration(server)

        settings = QSettings()
        settings.beginGroup('PostgreSQL/connections/'+self.nameConection.text())
        settings.setValue('database', self.dataBaseName.text())
        settings.setValue('host', self.hostAdress.text())
        settings.setValue('port', self.port.text())
        settings.setValue('username', self.userNameBase.text())
        settings.setValue('password', self.passwordBase.text())
        settings.endGroup()
        self.storeLastNameConnection()

        settings.beginGroup("ApiCredenciais")
        settings.setValue('key', self.key.text())
        settings.setValue('geocoderEngineIndex', self.geocoderEngine.currentIndex())
        settings.endGroup()
        #f = self.getServers
        #print (self.printServers())


    def getServerConfiguration(self, name):
        """
        Gets server configuration from QSettings
        name: server name
        """
        settings = QSettings()
        settings.beginGroup('PostgreSQL/connections/'+name)
        db = settings.value('database')
        host = settings.value('host')
        port = settings.value('port')
        user = settings.value('username')
        password = settings.value('password')
        settings.endGroup()
        return (host,port,db, user, password)

    def getKeyApi(self):

        settings = QSettings()
        settings.beginGroup("ApiCredenciais")
        s = settings.value('key')
        settings.endGroup()
        return s

    def getGeocoderEngineIndex(self):
        settings = QSettings()
        settings.beginGroup("ApiCredenciais")
        s = settings.value('geocoderEngineIndex')
        settings.endGroup()
        return s

    def storeLastNameConnection(self):

        settings = QSettings('foo')
        settings.setValue('name', self.nameConection.text())
        del settings

    def getLastNameConnection(self):

        settings = QSettings('foo')
        n = settings.value('name')
        return n

    def getServers(self):
        """
        Gets all servers from QSettings
        """
        settings = QSettings()
        settings.beginGroup('PostgreSQL/connections/')
        currentConnections = settings.childGroups()
        settings.endGroup()
        return currentConnections

    def printServers(self):
        """
        Populates the server combo box
        """
        #self.serversCombo.clear()
        currentConnections = self.getServers()
        for connection in currentConnections:
            print (connection)
