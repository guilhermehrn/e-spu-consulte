# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EspuConsulteDialog
                                 A QGIS plugin
 Consulta Sobreposição com áreas do Governo Federal do Brasil
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Guilherme Henrique
        email                : guilherme.nascimento@planejamento.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""


import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5 import QtGui


from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox, QDialog, QTableWidgetItem, QPushButton
from ..dbTools.dbTools import DbTools
from .addAttribute import AddAttribute

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'selectTable.ui'))



class SelectTable(QDialog, FORM_CLASS):
    def __init__(self, iface, tablesGeo, dataInsert):
        """Constructor."""

        QDialog.__init__(self)
        self.setupUi(self)
        self.iface = iface
        self.tablesG = tablesGeo
        self.comboBoxSelectClasse.addItems(self.prepareItensMenu(tablesGeo))
        self.nextScreen.clicked.connect(self.storeClasseSelect)
        self.dataInsert = dataInsert

    def prepareItensMenu(self, tablesGeo):
        menuList = []

        for item in tablesGeo:
            newName = item.replace("_", " ")
            newName.capitalize()
            menuList.append(newName.capitalize())

        return menuList

    def storeClasseSelect(self):

        indexopt = self.comboBoxSelectClasse.currentIndex()
        classSelec = [*self.tablesG][indexopt]
        dbt = DbTools()
        columnsClassSelec = dbt.getTableColum(classSelec, "public")
        typecolumns = dbt.getDataTypeColumns(classSelec)

        self.dataInsert.update({"class_selec":(classSelec,1)})
        self.dataInsert.update({"class_father":""})
        self.dataInsert.update({"col_class_selec": columnsClassSelec})
        self.dataInsert.update({"col_class_father":""})
        self.dataInsert.update({"type_col_class_selec": typecolumns})
        self.dataInsert.update({"type_col_class_father":""})

        d= AddAttribute(self.iface, self.dataInsert)
        d.exec_()
        print(self.dataInsert)
