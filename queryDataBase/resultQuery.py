# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EspuConsulteDialog
                                 A QGIS plugin
 Consulta Sobreposição com áreas do Governo Federal do Brasil
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Guilherme Henrique
        email                : guilherme.nascimento@planejamento.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets


from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox, QDialog, QTableWidgetItem

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'resultQuery.ui'))


class ResultQuery(QDialog, FORM_CLASS):
    def __init__(self, iface, results, tablesGeoColumns):
        """Constructor."""

        QDialog.__init__(self)
        self.setupUi(self)
        self.resultDic = results
        self.tablesGeoColumns = tablesGeoColumns
        #super(EspuConsulteDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        # self.generateReport.clicked.connect(self.generatorReport)

    def calculcateNumberLines(self):
        t = self.resultDic.keys()
        numbLinesPrev = 0
        keysClass = [*t]
        for classe in keysClass:
            aux = len(self.resultDic[classe])
            numbLinesPrev = numbLinesPrev + aux

        return numbLinesPrev

    def fillTable(self):
        if self.tableWidget.rowCount() == 0:
            self.tableWidget.setRowCount(self.calculcateNumberLines())
        i=0
        print (self.resultDic)
        t = self.resultDic.keys()
        keysClass = [*t]
        for classe in keysClass:
            itemCellClass = QTableWidgetItem(classe)
            
            self.tableWidget.setItem(i, 2, itemCellClass)
            i=i+1




    # def generatorReport(self):
    #     d=ConfigurationDialog(self.iface
    #     d.exec_()
