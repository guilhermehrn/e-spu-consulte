# -*- coding: utf-8 -*-
"""
/***************************************************************************
 EspuConsulteDialog
                                 A QGIS plugin
 Consulta Sobreposição com áreas do Governo Federal do Brasil
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-11-12
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Guilherme Henrique
        email                : guilherme.nascimento@planejamento.gov.br
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5 import QtWidgets
from PyQt5 import QtGui


from qgis.PyQt import uic
from qgis.PyQt.QtWidgets import QMessageBox, QDialog, QTableWidgetItem, QPushButton
from .detailsFeature import DetailsFeature

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'resultQuery.ui'))



class ResultQuery(QDialog, FORM_CLASS):
    def __init__(self, iface, results, tablesGeoColumns,ufIntecectList, municipioInterctList):
        """Constructor."""

        QDialog.__init__(self)
        self.setupUi(self)
        self.resultDic = results
        self.tablesGeoColumns = tablesGeoColumns
        self.iface = iface
        #super(EspuConsulteDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect

        # self.generateReport.clicked.connect(self.generatorReport)

    def calculcateNumberLines(self):
        t = self.resultDic.keys()
        numbLinesPrev = 0
        keysClass = [*t]
        for classe in keysClass:
            aux = len(self.resultDic[classe])
            numbLinesPrev = numbLinesPrev + aux

        return numbLinesPrev

    def detalharResultado(self):
        #button = QtGui.qApp.focusWidget()
        button = self.sender()
        index = self.tableWidget.indexAt(button.pos())
        if index.isValid():
            if index.column() == 4:
                classFeicao = str(self.tableWidget.item(index.row(), 2).text())
                #print(classFeicao)
                tablesResult = self.resultDic[classFeicao]
                d = DetailsFeature(self.iface, tablesResult, self.tablesGeoColumns[classFeicao])
                d.detailsFeaturesAll()
                d.exec_()
                #print(tablesResult[self.IndexTableToResult[index.row()][2]])



    def fillTable(self):

        if self.tableWidget.rowCount() == 0:
            self.tableWidget.setRowCount(self.calculcateNumberLines())
        i=0
        #print (self.resultDic)
        t = self.resultDic.keys()
        #btn=[]
        keysClass = [*t]

        self.IndexTableToResult=[]

        print (keysClass)
        for classe in keysClass:
            print ("Oi: " + classe)
            MatrizFeicoes = self.resultDic[classe]
            keyColumns = self.tablesGeoColumns[classe]
            print (keyColumns)
            if keyColumns.index("idproduto") >=0:
                idIndex = keyColumns.index("idproduto")
            else:
                idIndex = keyColumns.index("terra_originalmente_uniao_idproduto")

            if keyColumns.index("nome") >=0:
                nomeIndex = keyColumns.index("nome")
            else:
                nomeIndex = -1

            if keyColumns.index("observacao")>=0:
                ObsIndex = keyColumns.index("observacao")
            else:
                ObsIndex= -1

            j=0
            for feicao in MatrizFeicoes:

                #print(MatrizFeicoes[j][idIndex])

                if idIndex > -1:
                    itemCellClass = QTableWidgetItem(str(MatrizFeicoes[j][idIndex]))
                    self.tableWidget.setItem(i, 0, itemCellClass)

                if nomeIndex > -1:
                    itemCellClass = QTableWidgetItem(str(MatrizFeicoes[j][nomeIndex]))
                    self.tableWidget.setItem(i, 1, itemCellClass)

                if ObsIndex > -1:
                    itemCellClass = QTableWidgetItem(str(MatrizFeicoes[j][ObsIndex]))
                    self.tableWidget.setItem(i, 3, itemCellClass)

                itemCellClass = QTableWidgetItem(classe)
                self.tableWidget.setItem(i, 2, itemCellClass)
                self.IndexTableToResult.append((i,classe,j))

                self.btn = QPushButton(self.tableWidget)
                self.btn.setText("..." + str(i))
                self.btn.setObjectName("tbt"+str(i))
                self.btn.clicked.connect(self.detalharResultado)

                self.tableWidget.setCellWidget(i, 4, self.btn)

                self.tableWidget.itemClicked.connect(self.detalharResultado)
                j=j+1
                i=i+1

    #@QPushButton.pyqtSlot(QtWidgets.QTreeWidgetItem, int)







    # def generatorReport(self):
    #     d=ConfigurationDialog(self.iface
    #     d.exec_()
